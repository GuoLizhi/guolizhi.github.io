[{"title":"Golang泛型","date":"2023-09-18T06:00:32.000Z","path":"2023/09/18/Golang泛型/","excerpt":"Golang中内置了2种泛型类型 any 表示go里面的所有的基本类型，等价于interface&#123;&#125; comparable 表示go里面内置的所有的可比较的类型，int, float, uint, bool, struct, 指针等一切可比较的类型","tags":[{"name":"Go","slug":"Go","permalink":"https://guolizhi.github.io/tags/Go/"}]},{"title":"RabbitMQ基础","date":"2023-09-11T02:08:39.303Z","path":"2023/09/11/RabbitMQ/","excerpt":"","tags":[{"name":"数据库","slug":"数据库","permalink":"https://guolizhi.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"RabbitMQ","slug":"RabbitMQ","permalink":"https://guolizhi.github.io/tags/RabbitMQ/"}]},{"title":"Redis基础","date":"2023-08-17T02:15:37.923Z","path":"2023/08/17/Redis持久化/","excerpt":"持久化：Redis所有的数据都保存在内存中，将数据的更新将异步的保存到磁盘中","tags":[{"name":"数据库","slug":"数据库","permalink":"https://guolizhi.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Redis","slug":"Redis","permalink":"https://guolizhi.github.io/tags/Redis/"}]},{"title":"Solidity基础","date":"2023-08-10T02:28:00.000Z","path":"2023/08/10/Solidity基础/","excerpt":"","tags":[{"name":"Solidity","slug":"Solidity","permalink":"https://guolizhi.github.io/tags/Solidity/"}]},{"title":"Golang RPC","date":"2023-08-09T10:14:03.000Z","path":"2023/08/09/Golang-RPC/","excerpt":"","tags":[{"name":"Go","slug":"Go","permalink":"https://guolizhi.github.io/tags/Go/"}]},{"title":"MySQL事务","date":"2023-08-08T00:14:12.000Z","path":"2023/08/08/MySQL事务/","excerpt":"什么是事务? 事务是数据库执行操作的最小逻辑单元 事务可以由一个SQL组成也可以由多个SQL组成 组成事务的SQL要么全执行成功要么全执行失败","tags":[{"name":"数据库","slug":"数据库","permalink":"https://guolizhi.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://guolizhi.github.io/tags/MySQL/"}]},{"title":"MySQL优化","date":"2023-08-05T12:03:42.707Z","path":"2023/08/05/MySQL优化/","excerpt":"","tags":[{"name":"数据库","slug":"数据库","permalink":"https://guolizhi.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://guolizhi.github.io/tags/MySQL/"}]},{"title":"MySQL基础","date":"2023-08-04T11:21:30.190Z","path":"2023/08/04/MySQL基础/","excerpt":"SQL vs. NOSQL关系型数据库的特点 数据结构化存储在二维表中 支持事务的ACID特性 支持SQL语言对数据进行操作 关系型数据库的适用场景 数据之间存在着一定的关系，需要关联查询数据的场景 需要事务支持的特定场景 需要使用SQL灵活操作数据库的场景","tags":[{"name":"数据库","slug":"数据库","permalink":"https://guolizhi.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://guolizhi.github.io/tags/MySQL/"}]},{"title":"Golang协程","date":"2023-08-01T06:00:41.000Z","path":"2023/08/01/Golang协程/","excerpt":"WaitGroup的用法 123456789101112func main() &#123; var wg sync.WaitGroup for i := 0; i &lt; 100; i++ &#123; // Add和Done必须同时出现，不然程序会出现deadlock! wg.Add(1) go func(i int) &#123; defer wg.Done() fmt.Println(i) &#125;(i) &#125; wg.Wait()&#125;","tags":[{"name":"Go","slug":"Go","permalink":"https://guolizhi.github.io/tags/Go/"}]},{"title":"Golang单元测试","date":"2023-08-01T06:00:32.000Z","path":"2023/08/01/Golang单元测试/","excerpt":"单元测试go test, 在包目录中，所有以_test.go为后缀的源码文件都会被go test运行到。我们写的_test.go为后缀的源码文件都会被go test运行到。我们写的_test.go文件不需要担心内容过多，因为go build命令不会讲这些测试文件打包到最后的可执行文件中。test文件总共有4种 Test开头的功能测试 Benchmark开头的性能测试 example 模糊测试","tags":[{"name":"Go","slug":"Go","permalink":"https://guolizhi.github.io/tags/Go/"}]},{"title":"Golang包","date":"2023-08-01T06:00:27.000Z","path":"2023/08/01/Golang包/","excerpt":"同一个文件夹下面，所有文件的包名应该一致 设置goproxy 1go env -w GOPROXY=https://goproxy.cn,direct","tags":[{"name":"Go","slug":"Go","permalink":"https://guolizhi.github.io/tags/Go/"}]},{"title":"Golang接口","date":"2023-08-01T06:00:18.000Z","path":"2023/08/01/Golang接口/","excerpt":"go语言中的“鸭子类型” 12345678910111213141516171819202122232425262728type Animal interface &#123; Say() Walk() Fly()&#125;type Bird struct &#123; Name string&#125;// Duck Typing// bird实现了Say/Walk/Fly三个方法，那就可以认为Bird就是Animal类型func (b *Bird) Say() &#123; fmt.Println(b.Name, &quot;saying...&quot;)&#125;func (b *Bird) Fly() &#123; fmt.Println(b.Name, &quot;flying...&quot;)&#125;func (b *Bird) Walk() &#123; fmt.Println(b.Name, &quot;walking...&quot;)&#125;func main() &#123; var b Animal = &amp;Bird&#123;&quot;CX&quot;&#125; b.Say() b.Walk() b.Fly()&#125;","tags":[{"name":"Go","slug":"Go","permalink":"https://guolizhi.github.io/tags/Go/"}]},{"title":"Golang指针","date":"2023-08-01T06:00:08.000Z","path":"2023/08/01/Golang指针/","excerpt":"如何初始化一个指针变量 12345func main() &#123; // 初始化一个int类型的指针，可以对已经声明过的变量取地址 a := 10 b := &amp;a&#125;","tags":[{"name":"Go","slug":"Go","permalink":"https://guolizhi.github.io/tags/Go/"}]},{"title":"Golang结构体","date":"2023-08-01T05:59:51.000Z","path":"2023/08/01/Golang结构体/","excerpt":"type关键字的三种作用 定义结构体 定义接口 定义类型别名 类型定义 类型判断 类型别名 12345678910func main() &#123; // 类型别名必须加上等于号 type MyInt = int var i MyInt fmt.Printf(&quot;%T\\n&quot;, i) // int i = 10 var j int = 20 // 在编译的时候，类型别名MyInt会被替换为int fmt.Println(i + j) // 30&#125;","tags":[{"name":"Go","slug":"Go","permalink":"https://guolizhi.github.io/tags/Go/"}]},{"title":"Golang函数","date":"2023-08-01T05:59:43.000Z","path":"2023/08/01/Golang函数/","excerpt":"函数的动态参数个数 12345678// 动态参数items会形成一个slicefunc add(items ...int) int &#123; var sum int for _, val := range items &#123; sum += val &#125; return sum&#125;","tags":[{"name":"Go","slug":"Go","permalink":"https://guolizhi.github.io/tags/Go/"}]},{"title":"Golang数组和切片","date":"2023-08-01T05:59:33.000Z","path":"2023/08/01/Golang数组和切片/","excerpt":"Go 里面定义数组的方式 12// var arr [len]intvar arr1 [3]int","tags":[{"name":"Go","slug":"Go","permalink":"https://guolizhi.github.io/tags/Go/"}]},{"title":"Redis基础","date":"2023-08-01T05:43:15.819Z","path":"2023/08/01/Redis基础/","excerpt":"1. Redis简介Redis的三大作用 缓存 数据库 中间件 redis是单线程的。单线程为什么这么快呢？ 纯内存 非阻塞IO 避免线程切换和竞态消耗 单线程的特点 一次只运行一条命令 拒绝长(慢)命令","tags":[{"name":"数据库","slug":"数据库","permalink":"https://guolizhi.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Redis","slug":"Redis","permalink":"https://guolizhi.github.io/tags/Redis/"}]}]